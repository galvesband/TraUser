services:
  # User administration class
  galvesband.tra.user.admin.user:
    class:          Galvesband\TraUserBundle\Admin\UserAdmin
    arguments:      [~, Galvesband\TraUserBundle\Entity\User, ~]
    tags:
      - { name: sonata.admin, manager_type: orm, group: Users and Permissions, label: Users }
    calls:
      - [ setTranslationDomain, ['GalvesbandTraUserBundle']]

  # Group administration class
  galvesband.tra.user.admin.group:
    class:          Galvesband\TraUserBundle\Admin\GroupAdmin
    arguments:      [~, Galvesband\TraUserBundle\Entity\Group, ~]
    tags:
      - { name: sonata.admin, manager_type: orm, group: Users and Permissions, label: Groups }
    calls:
      - [ setTranslationDomain, ['GalvesbandTraUserBundle']]

  # Role administration class
  galvesband.tra.user.admin.role:
    class:          Galvesband\TraUserBundle\Admin\RoleAdmin
    arguments:      [~, Galvesband\TraUserBundle\Entity\Role, ~]
    tags:
      - { name: sonata.admin, manager_type: orm, group: Users and Permissions, label: Roles }
    calls:
          - [ setTranslationDomain, ['GalvesbandTraUserBundle']]

  # User Manager - Hash the user password when modified before persisting or updating him
  galvesband.tra.user.manager:
    class:          Galvesband\TraUserBundle\DependencyInjection\UserManager
    arguments:
      - "@security.encoder_factory"
    tags:
      - { name: doctrine.event_listener, event: prePersist }
      - { name: doctrine.event_listener, event: preUpdate }

  # User security handler - Forbids actions over users with ROLE_SUPER_ADMIN to anyone not being ROLE_SUPER_ADMIN
  galvesband.tra.user.security.handler.user_security_handler:
    class:          Galvesband\TraUserBundle\Security\Handler\UserSecurityHandler
    arguments:
      tokenStorage: "@security.token_storage"
      fallback: "@sonata.admin.security.handler.role"

  # Group security handler - Forbids actions over groups with ROLE_SUPER_ADMIN to anyone not being ROLE_SUPER_ADMIN
  galvesband.tra.user.security.handler.group_security_handler:
    class:          Galvesband\TraUserBundle\Security\Handler\GroupSecurityHandler
    arguments:
      tokenStorage: "@security.token_storage"
      fallback: "@sonata.admin.security.handler.role"

  # Handles security in SonataAdmin
  # Relies on other security handlers based on an instanceof check
  galvesband.tra.user.security.handler.per_model_handler:
    class:          Galvesband\TraUserBundle\Security\Handler\PerClassSecurityHandler
    arguments:
      # Allowed handlers
      handlers:
        role:       '@sonata.admin.security.handler.role'
        noop:       '@sonata.admin.security.handler.noop'
        user:       '@galvesband.tra.user.security.handler.user_security_handler'
        group:      '@galvesband.tra.user.security.handler.group_security_handler'
      # Relation between classes and security handlers to be applied to
      classHandlerMap: '%galvesband.tra.user.admin.security.handler_map%'
