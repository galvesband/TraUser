<?php

/*
 * This file is part of the Galvesband TraUserBundle.
 *
 * (c) Rafael Gálvez-Cañero
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Galvesband\TraUserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * Retrieves a single user by name and token.
     *
     * The token creation date must be in the previous 24h and the user must be active.
     *
     * @param string $name User's name
     * @param string $tokenString Token associated to that user.
     * @return \Galvesband\TraUserBundle\Entity\User|null
     */
    public function findByToken($name, $tokenString)
    {
        $fromDateTime = new \DateTime('-1 day');
        $toDateTime = new \DateTime('now');

        $user = $this->createQueryBuilder('u')
            ->innerJoin('u.token', 't')
            ->where('u.name = :user_name')
            ->andWhere('u.isActive = 1')
            ->andWhere('t.createdAt > :from_datetime')
            ->andWhere('t.createdAt < :to_datetime')
            ->andWhere('t.token = :token')
            ->setParameters([
                'user_name' => $name,
                'from_datetime' => $fromDateTime,
                'to_datetime' => $toDateTime,
                'token' => $tokenString
            ])
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $user;
    }

    /**
     * Returns an active user by name and email or null if not found.
     *
     * @param string $name
     * @param string $email
     * @return User|null
     */
    public function findByNameAndEmail($name, $email)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.name = :user_name')
            ->andWhere('u.email = :email')
            ->andWhere('u.isActive = 1')
            ->setParameter('user_name', $name)
            ->setParameter('email', $email)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $user;
    }

    public function findByName($name)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.name = :user_name')
            ->setParameter('user_name', $name)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $user;
    }
}
